"""
This type stub file was generated by pyright.
"""

__all__ = ["String", "FormattedString", "Url", "DateTime", "Float", "Integer", "Arbitrary", "Nested", "List", "Raw", "Boolean", "Fixed", "Price"]
class MarshallingException(Exception):
    """
    This is an encapsulating Exception in case of marshalling error.
    """
    def __init__(self, underlying_exception) -> None:
        ...
    


def is_indexable_but_not_string(obj): # -> bool:
    ...

def get_value(key, obj, default=...): # -> Any:
    """Helper for pulling a keyed value off various types of objects"""
    ...

def to_marshallable_type(obj): # -> dict[Any, Any] | None:
    """Helper for converting an object to a dictionary only if it is not
    dictionary already or an indexable object nor a simple type"""
    ...

class Raw:
    """Raw provides a base field class from which others should extend. It
    applies no formatting by default, and should only be used in cases where
    data does not need to be formatted before being serialized. Fields should
    throw a :class:`MarshallingException` in case of parsing problem.

    :param default: The default value for the field, if no value is
        specified.
    :param attribute: If the public facing value differs from the internal
        value, use this to retrieve a different attribute from the response
        than the publicly named value.
    """
    def __init__(self, default=..., attribute=...) -> None:
        ...
    
    def format(self, value):
        """Formats a field's value. No-op by default - field classes that
        modify how the value of existing object keys should be presented should
        override this and apply the appropriate formatting.

        :param value: The value to format
        :exception MarshallingException: In case of formatting problem

        Ex::

            class TitleCase(Raw):
                def format(self, value):
                    return unicode(value).title()
        """
        ...
    
    def output(self, key, obj): # -> Any | None:
        """Pulls the value for the given key from the object, applies the
        field's formatting and returns the result. If the key is not found
        in the object, returns the default value. Field classes that create
        values which do not require the existence of the key in the object
        should override this and return the desired value.

        :exception MarshallingException: In case of formatting problem
        """
        ...
    


class Nested(Raw):
    """Allows you to nest one set of fields inside another.
    See :ref:`nested-field` for more information

    :param dict nested: The dictionary to nest
    :param bool allow_null: Whether to return None instead of a dictionary
        with null keys, if a nested dictionary has all-null keys
    :param kwargs: If ``default`` keyword argument is present, a nested
        dictionary will be marshaled as its value if nested dictionary is
        all-null keys (e.g. lets you return an empty JSON object instead of
        null)
    """
    def __init__(self, nested, allow_null=..., **kwargs) -> None:
        ...
    
    def output(self, key, obj): # -> list[Any] | None:
        ...
    


class List(Raw):
    """
    Field for marshalling lists of other fields.

    See :ref:`list-field` for more information.

    :param cls_or_instance: The field type the list will contain.
    """
    def __init__(self, cls_or_instance, **kwargs) -> None:
        ...
    
    def format(self, value): # -> list[Any | None]:
        ...
    
    def output(self, key, data): # -> list[Any | None] | list[Any | list[Any]] | None:
        ...
    


class String(Raw):
    """
    Marshal a value as a string. Uses ``six.text_type`` so values will
    be converted to :class:`unicode` in python2 and :class:`str` in
    python3.
    """
    def format(self, value): # -> str:
        ...
    


class Integer(Raw):
    """ Field for outputting an integer value.

    :param int default: The default value for the field, if no value is
        specified.
    """
    def __init__(self, default=..., **kwargs) -> None:
        ...
    
    def format(self, value): # -> int | None:
        ...
    


class Boolean(Raw):
    """
    Field for outputting a boolean value.

    Empty collections such as ``""``, ``{}``, ``[]``, etc. will be converted to
    ``False``.
    """
    def format(self, value): # -> bool:
        ...
    


class FormattedString(Raw):
    """
    FormattedString is used to interpolate other values from
    the response into this field. The syntax for the source string is
    the same as the string :meth:`~str.format` method from the python
    stdlib.

    Ex::

        fields = {
            'name': fields.String,
            'greeting': fields.FormattedString("Hello {name}")
        }
        data = {
            'name': 'Doug',
        }
        marshal(data, fields)
    """
    def __init__(self, src_str) -> None:
        """
        :param string src_str: the string to format with the other
        values from the response.
        """
        ...
    
    def output(self, key, obj):
        ...
    


class Url(Raw):
    """
    A string representation of a Url

    :param endpoint: Endpoint name. If endpoint is ``None``,
        ``request.endpoint`` is used instead
    :type endpoint: str
    :param absolute: If ``True``, ensures that the generated urls will have the
        hostname included
    :type absolute: bool
    :param scheme: URL scheme specifier (e.g. ``http``, ``https``)
    :type scheme: str
    """
    def __init__(self, endpoint=..., absolute=..., scheme=..., **kwargs) -> None:
        ...
    
    def output(self, key, obj): # -> str:
        ...
    


class Float(Raw):
    """
    A double as IEEE-754 double precision.
    ex : 3.141592653589793 3.1415926535897933e-06 3.141592653589793e+24 nan inf
    -inf
    """
    def format(self, value): # -> float:
        ...
    


class Arbitrary(Raw):
    """
        A floating point number with an arbitrary precision
          ex: 634271127864378216478362784632784678324.23432
    """
    def format(self, value): # -> str:
        ...
    


class DateTime(Raw):
    """
    Return a formatted datetime string in UTC. Supported formats are RFC 822
    and ISO 8601.

    See :func:`email.utils.formatdate` for more info on the RFC 822 format.

    See :meth:`datetime.datetime.isoformat` for more info on the ISO 8601
    format.

    :param dt_format: ``'rfc822'`` or ``'iso8601'``
    :type dt_format: str
    """
    def __init__(self, dt_format=..., **kwargs) -> None:
        ...
    
    def format(self, value): # -> str:
        ...
    


ZERO = ...
class Fixed(Raw):
    """
    A decimal number with a fixed precision.
    """
    def __init__(self, decimals=..., **kwargs) -> None:
        ...
    
    def format(self, value): # -> str:
        ...
    


Price = Fixed
